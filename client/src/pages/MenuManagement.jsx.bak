import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import PriceHistoryDialog from '../components/PriceHistoryDialog';
import MenuSalesAnalysisDialog from '../components/MenuSalesAnalysisDialog';
import AutoInventoryDeductionDialog from '../components/AutoInventoryDeductionDialog';
import QRCodeGenerator from '../components/QRCodeGenerator';
import { menuService, inventoryService } from '../api';
import { 
  Container, 
  Typography, 
  Box, 
  Paper, 
  Button, 
  Grid, 
  Card, 
  CardContent, 
  CardMedia, 
  CardActions,
  IconButton,
  TextField,
  InputAdornment,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Chip,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Snackbar,
  Alert,
  Divider,
  List,
  ListItem,
  ListItemText,
  ListItemSecondaryAction,
  Switch,
  Tabs,
  Tab,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Tooltip
} from '@mui/material';
import {
  Add as AddIcon,
  Search as SearchIcon,
  Edit as EditIcon,
  Delete as DeleteIcon,
  Restaurant as MenuIcon,
  FilterList as FilterIcon,
  Link as LinkIcon,
  LocalOffer as PriceIcon,
  Visibility as VisibilityIcon,
  VisibilityOff as VisibilityOffIcon,
  Star as StarIcon,
  StarBorder as StarBorderIcon,
  Info as InfoIcon,
  Event as EventIcon,
  Today as TodayIcon,
  CalendarMonth as CalendarIcon,
  History as HistoryIcon,
  PriceChange as PriceChangeIcon,
  BarChart as BarChartIcon,
  Analytics as AnalyticsIcon,
  Inventory as InventoryIcon,
  QrCode as QrCodeIcon
} from '@mui/icons-material';

const MenuManagement = () => {
  const navigate = useNavigate();
  
  // 状態管理
  const [menuItems, setMenuItems] = useState([]);
  const [filteredMenuItems, setFilteredMenuItems] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterCategory, setFilterCategory] = useState('');
  const [filterAvailability, setFilterAvailability] = useState('');
  const [filterMenuType, setFilterMenuType] = useState('');
  const [categories, setCategories] = useState([]);
  const [selectedTab, setSelectedTab] = useState(0);
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [selectedMenuItem, setSelectedMenuItem] = useState(null);
  const [alert, setAlert] = useState({ open: false, message: '', severity: 'success' });
  const [linkRecipeDialogOpen, setLinkRecipeDialogOpen] = useState(false);
  const [priceHistoryDialogOpen, setPriceHistoryDialogOpen] = useState(false);
  const [salesAnalysisDialogOpen, setSalesAnalysisDialogOpen] = useState(false);
  const [inventoryDeductionDialogOpen, setInventoryDeductionDialogOpen] = useState(false);
  const [qrCodeGeneratorOpen, setQrCodeGeneratorOpen] = useState(false);
  const [availableRecipes, setAvailableRecipes] = useState([]);
  const [selectedRecipe, setSelectedRecipe] = useState('');
  const [tables, setTables] = useState([]);

  // モックデータの読み込み
  useEffect(() => {
    // テーブルデータの読み込み
    const mockTables = [
      { id: 1, name: 'テーブル1', seats: 2, status: 'available' },
      { id: 2, name: 'テーブル2', seats: 4, status: 'occupied' },
      { id: 3, name: 'テーブル3', seats: 6, status: 'available' },
      { id: 4, name: 'テーブル4', seats: 4, status: 'reserved' },
      { id: 5, name: 'カウンター1', seats: 1, status: 'available' },
      { id: 6, name: 'カウンター2', seats: 1, status: 'available' },
      { id: 7, name: 'カウンター3', seats: 1, status: 'occupied' },
      { id: 8, name: 'VIP席', seats: 8, status: 'available' }
    ];
    
    setTables(mockTables);
    // 実際のAPIが実装されるまでモックデータを使用
    const mockCategories = [
      { id: 1, name: '前菜', order: 1 },
      { id: 2, name: '主菜', order: 2 },
      { id: 3, name: 'サイドディッシュ', order: 3 },
      { id: 4, name: 'デザート', order: 4 },
      { id: 5, name: 'ドリンク', order: 5 }
    ];
    
    const mockMenuItems = [
      {
        id: 1,
        name: '海鮮丼',
        description: '新鮮な魚介をふんだんに使った海鮮丼です。',
        image: 'https://source.unsplash.com/random/300x200/?sushi',
        price: 1800,
        categoryId: 2,
        isAvailable: true,
        isFeatured: true,
        allergies: ['魚介類', '大豆'],
        calories: 650,
        recipeId: 1,
        recipeName: '海鮮丼',
        isSeasonalMenu: true,
        seasonalPeriod: {
          start: '2025-06-01',
          end: '2025-08-31'
        },
        isDailySpecial: false,
        availableDays: [],
        createdAt: '2023-04-10T10:30:00',
        updatedAt: '2023-04-15T14:45:00',
        priceHistory: [
          {
            id: 1,
            date: '2025-01-15T10:00:00',
            oldPrice: 1500,
            newPrice: 1800,
            reason: '原材料費の上昇',
            change: 300
          },
          {
            id: 2,
            date: '2024-10-01T09:30:00',
            oldPrice: 1600,
            newPrice: 1500,
            reason: '季節キャンペーン',
            change: -100
          },
          {
            id: 3,
            date: '2024-07-20T14:15:00',
            oldPrice: 1400,
            newPrice: 1600,
            reason: 'メニュー改定',
            change: 200
          }
        ]
      },
      {
        id: 2,
        name: '天ぷら盛り合わせ',
        description: '季節の野菜と海老の天ぷら盛り合わせです。',
        image: 'https://source.unsplash.com/random/300x200/?tempura',
        price: 1500,
        categoryId: 2,
        isAvailable: true,
        isFeatured: false,
        allergies: ['小麦', 'えび'],
        calories: 800,
        recipeId: 2,
        recipeName: '天ぷら盛り合わせ',
        isSeasonalMenu: false,
        seasonalPeriod: {
          start: '',
          end: ''
        },
        isDailySpecial: true,
        availableDays: ['monday', 'wednesday', 'friday'],
        createdAt: '2023-04-05T09:15:00',
        updatedAt: '2023-04-05T09:15:00',
        priceHistory: [
          {
            id: 1,
            date: '2025-02-10T11:30:00',
            oldPrice: 1300,
            newPrice: 1500,
            reason: '原材料費の上昇',
            change: 200
          }
        ]
      },
      {
        id: 3,
        name: '焼き魚定食',
        description: '新鮮な魚を香ばしく焼き上げた定食です。',
        image: 'https://source.unsplash.com/random/300x200/?grilled-fish',
        price: 1200,
        categoryId: 2,
        isAvailable: true,
        isFeatured: false,
        allergies: ['魚介類'],
        calories: 550,
        recipeId: 3,
        recipeName: '焼き魚定食',
        createdAt: '2023-04-12T11:20:00',
        updatedAt: '2023-04-14T16:30:00'
      },
      {
        id: 4,
        name: '季節のサラダ',
        description: '地元の新鮮な野菜を使用した季節のサラダです。',
        image: 'https://source.unsplash.com/random/300x200/?salad',
        price: 800,
        categoryId: 1,
        isAvailable: true,
        isFeatured: false,
        allergies: [],
        calories: 250,
        recipeId: null,
        recipeName: null,
        createdAt: '2023-04-08T13:10:00',
        updatedAt: '2023-04-08T13:10:00'
      },
      {
        id: 5,
        name: '抹茶アイスクリーム',
        description: '濃厚な抹茶の風味が楽しめる手作りアイスクリームです。',
        image: 'https://source.unsplash.com/random/300x200/?matcha-ice-cream',
        price: 500,
        categoryId: 4,
        isAvailable: true,
        isFeatured: true,
        allergies: ['乳製品'],
        calories: 300,
        recipeId: null,
        recipeName: null,
        createdAt: '2023-04-09T15:30:00',
        updatedAt: '2023-04-09T15:30:00'
      },
      {
        id: 6,
        name: '日本酒（小）',
        description: '地元の酒蔵で作られた純米酒です。',
        image: 'https://source.unsplash.com/random/300x200/?sake',
        price: 600,
        categoryId: 5,
        isAvailable: true,
        isFeatured: false,
        allergies: [],
        calories: 150,
        recipeId: null,
        recipeName: null,
        createdAt: '2023-04-11T17:20:00',
        updatedAt: '2023-04-11T17:20:00'
      }
    ];
    
    // レシピのモックデータ
    const mockRecipes = [
      { id: 1, name: '海鮮丼' },
      { id: 2, name: '天ぷら盛り合わせ' },
      { id: 3, name: '焼き魚定食' },
      { id: 4, name: '味噌汁' },
      { id: 5, name: '茶碗蒸し' },
      { id: 6, name: 'うどん' }
    ];
    
    setCategories(mockCategories);
    setMenuItems(mockMenuItems);
    setFilteredMenuItems(mockMenuItems);
    setAvailableRecipes(mockRecipes);
  }, []);

  // 検索とフィルタリング
  useEffect(() => {
    let result = [...menuItems];
    
    // 検索語でフィルタリング
    if (searchTerm) {
      result = result.filter(item => 
        item.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        item.description.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }
    
    // カテゴリでフィルタリング
    if (filterCategory) {
      result = result.filter(item => item.categoryId === parseInt(filterCategory));
    }
    
    // 提供状況でフィルタリング
    if (filterAvailability === 'available') {
      result = result.filter(item => item.isAvailable);
    } else if (filterAvailability === 'unavailable') {
      result = result.filter(item => !item.isAvailable);
    }
    
    // メニュータイプでフィルタリング
    if (filterMenuType === 'seasonal') {
      result = result.filter(item => item.isSeasonalMenu);
    } else if (filterMenuType === 'daily') {
      result = result.filter(item => item.isDailySpecial);
    }
    
    // タブによるフィルタリング
    if (selectedTab === 1) { // おすすめメニュー
      result = result.filter(item => item.isFeatured);
    }
    
    setFilteredMenuItems(result);
  }, [menuItems, searchTerm, filterCategory, filterAvailability, selectedTab]);

  // 検索語の変更ハンドラ
  const handleSearchChange = (e) => {
    setSearchTerm(e.target.value);
  };

  // カテゴリフィルタの変更ハンドラ
  const handleCategoryFilterChange = (e) => {
    setFilterCategory(e.target.value);
  };

  // 提供状況フィルタの変更ハンドラ
  const handleAvailabilityFilterChange = (e) => {
    setFilterAvailability(e.target.value);
  };

  // フィルタのリセット
  const resetFilters = () => {
    setSearchTerm('');
    setFilterCategory('');
    setFilterAvailability('');
    setFilterMenuType('');
  };

  // タブ切り替えハンドラ
  const handleTabChange = (event, newValue) => {
    setSelectedTab(newValue);
  };
  
  // 現在の曜日から日替わりメニューが利用可能かチェック
  const isDailyMenuAvailableToday = (menuItem) => {
    if (!menuItem.isDailySpecial) return true;
    
    const days = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];
    const today = new Date().getDay(); // 0: 日曜日, 1: 月曜日, ..., 6: 土曜日
    const dayName = days[today];
    
    return menuItem.availableDays.includes(dayName);
  };
  
  // 季節メニューが現在の期間内かチェック
  const isSeasonalMenuInSeason = (menuItem) => {
    if (!menuItem.isSeasonalMenu) return true;
    
    const today = new Date();
    const startDate = menuItem.seasonalPeriod.start ? new Date(menuItem.seasonalPeriod.start) : null;
    const endDate = menuItem.seasonalPeriod.end ? new Date(menuItem.seasonalPeriod.end) : null;
    
    if (!startDate || !endDate) return false;
    
    return today >= startDate && today <= endDate;
  };
  
  // メニューの特別タイプを表示するチップを生成
  const renderMenuTypeChips = (menuItem) => {
    const chips = [];
    
    if (menuItem.isSeasonalMenu) {
      const isInSeason = isSeasonalMenuInSeason(menuItem);
      chips.push(
        <Chip 
          key="seasonal"
          icon={<EventIcon />}
          label="季節限定"
          color={isInSeason ? "primary" : "default"}
          variant={isInSeason ? "filled" : "outlined"}
          size="small"
          sx={{ mr: 0.5 }}
        />
      );
    }
    
    if (menuItem.isDailySpecial) {
      const isAvailableToday = isDailyMenuAvailableToday(menuItem);
      chips.push(
        <Chip 
          key="daily"
          icon={<TodayIcon />}
          label="日替わり"
          color={isAvailableToday ? "secondary" : "default"}
          variant={isAvailableToday ? "filled" : "outlined"}
          size="small"
        />
      );
    }
    
    return chips;
  };

  // メニュー編集ページへの遷移
  const handleEditMenuItem = (menuItemId) => {
    navigate(`/menu/edit/${menuItemId}`);
  };

  // 削除ダイアログを開く
  const handleDeleteClick = (menuItem) => {
    setSelectedMenuItem(menuItem);
    setDeleteDialogOpen(true);
  };

  // メニュー項目を削除
  const handleDeleteMenuItem = () => {
    // 実際のアプリでは、APIを呼び出してメニュー項目を削除
    const updatedMenuItems = menuItems.filter(item => item.id !== selectedMenuItem.id);
    setMenuItems(updatedMenuItems);
    
    setAlert({
      open: true,
      message: 'メニュー項目が正常に削除されました',
      severity: 'success'
    });
    
    setDeleteDialogOpen(false);
    setSelectedMenuItem(null);
  };

  // 提供状況の切り替え
  const handleAvailabilityToggle = (menuItemId) => {
    const updatedMenuItems = menuItems.map(item => {
      if (item.id === menuItemId) {
        return {
          ...item,
          isAvailable: !item.isAvailable
        };
      }
      return item;
    });
    
    setMenuItems(updatedMenuItems);
  };

  // おすすめ状態の切り替え
  const handleFeaturedToggle = (menuItemId) => {
    const updatedMenuItems = menuItems.map(item => {
      if (item.id === menuItemId) {
        return {
          ...item,
          isFeatured: !item.isFeatured
        };
      }
      return item;
    });
    
    setMenuItems(updatedMenuItems);
  };

  // レシピリンクダイアログを開く
  const handleLinkRecipeClick = (menuItem) => {
    setSelectedMenuItem(menuItem);
    setSelectedRecipe(menuItem.recipeId ? menuItem.recipeId.toString() : '');
    setLinkRecipeDialogOpen(true);
  };
  
  // 価格履歴ダイアログを開く
  const handlePriceHistoryClick = (menuItem) => {
    setSelectedMenuItem(menuItem);
    setPriceHistoryDialogOpen(true);
  };

  // 売上分析ダイアログを開く
  const handleSalesAnalysisClick = (menuItem) => {
    setSelectedMenuItem(menuItem);
    setSalesAnalysisDialogOpen(true);
  };
  
  // 在庫自動引き落とし設定ダイアログを開く
  const handleInventoryDeductionClick = (menuItem) => {
    setSelectedMenuItem(menuItem);
    setInventoryDeductionDialogOpen(true);
  };
  
  // QRコード生成ダイアログを開く
  const handleQRCodeGeneratorClick = () => {
    setQrCodeGeneratorOpen(true);
  };
  
  // モックデータの読み込み
  useEffect(() => {
    // テーブルデータの読み込み
    const mockTables = [
      { id: 1, name: 'テーブル1', seats: 2, status: 'available' },
      { id: 2, name: 'テーブル2', seats: 4, status: 'occupied' },
      { id: 3, name: 'テーブル3', seats: 6, status: 'available' },
      { id: 4, name: 'テーブル4', seats: 4, status: 'reserved' },
      { id: 5, name: 'カウンター1', seats: 1, status: 'available' },
      { id: 6, name: 'カウンター2', seats: 1, status: 'available' },
      { id: 7, name: 'カウンター3', seats: 1, status: 'occupied' },
      { id: 8, name: 'VIP席', seats: 8, status: 'available' }
    ];
    
    setTables(mockTables);
    // 実際のAPIが実装されるまでモックデータを使用
    const mockCategories = [
      { id: 1, name: '前菜', order: 1 },
      { id: 2, name: '主菜', order: 2 },
      { id: 3, name: 'サイドディッシュ', order: 3 },
      { id: 4, name: 'デザート', order: 4 },
      { id: 5, name: 'ドリンク', order: 5 }
    ];
    
    setCategories(mockCategories);
    
    // メニューデータの読み込み
    const mockMenuItems = [
      // モックデータの内容は省略
    ];
    
    setMenuItems(mockMenuItems);
    setFilteredMenuItems(mockMenuItems);
    
    // レシピデータの読み込み
    const mockRecipes = [
      // モックデータの内容は省略
    ];
    
    setAvailableRecipes(mockRecipes);
  }, []);

  // 検索とフィルタリング
  useEffect(() => {
    let result = [...menuItems];
    
    // 検索語でフィルタリング
    if (searchTerm) {
      result = result.filter(item => 
        item.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        item.description.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }
    
    // カテゴリでフィルタリング
    if (filterCategory) {
      result = result.filter(item => item.categoryId === parseInt(filterCategory));
    }
    
    // 提供状況でフィルタリング
    if (filterAvailability) {
      if (filterAvailability === 'available') {
        result = result.filter(item => item.isAvailable);
      } else if (filterAvailability === 'unavailable') {
        result = result.filter(item => !item.isAvailable);
      }
    }
    
    // メニュータイプでフィルタリング
    if (filterMenuType) {
      if (filterMenuType === 'seasonal') {
        result = result.filter(item => item.isSeasonalMenu);
      } else if (filterMenuType === 'daily') {
        result = result.filter(item => item.isDailySpecial);
      } else if (filterMenuType === 'featured') {
        result = result.filter(item => item.isFeatured);
      }
    }
    
    setFilteredMenuItems(result);
  }, [menuItems, searchTerm, filterCategory, filterAvailability, filterMenuType]);

  // 検索語の変更ハンドラ
  const handleSearchChange = (e) => {
    setSearchTerm(e.target.value);
  };
  
  // カテゴリフィルタの変更ハンドラ
  const handleCategoryFilterChange = (e) => {
    setFilterCategory(e.target.value);
  };
  
  // 提供状況フィルタの変更ハンドラ
  const handleAvailabilityFilterChange = (e) => {
    setFilterAvailability(e.target.value);
  };
  
  // フィルタのリセット
  const resetFilters = () => {
    setSearchTerm('');
    setFilterCategory('');
    setFilterAvailability('');
    setFilterMenuType('');
  };
  
  // タブ切り替えハンドラ
  const handleTabChange = (event, newValue) => {
    setSelectedTab(newValue);
  };
  
  // 現在の曜日から日替わりメニューが利用可能かチェック
  const isDailyMenuAvailableToday = (menuItem) => {
    if (!menuItem.isDailySpecial) return false;
    
    const today = new Date().getDay();
    const dayMap = {
      sunday: 0,
      monday: 1,
      tuesday: 2,
      wednesday: 3,
      thursday: 4,
      friday: 5,
      saturday: 6
    };
    
    return menuItem.availableDays.some(day => dayMap[day] === today);
  };
  
  // 季節メニューが現在の期間内かチェック
  const isSeasonalMenuInSeason = (menuItem) => {
    if (!menuItem.isSeasonalMenu) return false;
    
    const today = new Date();
    const startDate = new Date(menuItem.seasonalPeriod.start);
    const endDate = new Date(menuItem.seasonalPeriod.end);
    
    return today >= startDate && today <= endDate;
  };
  
  // メニュー編集ページへの遷移
  const handleEditMenuItem = (menuItemId) => {
    navigate(`/menu/edit/${menuItemId}`);
  };
  
  // 削除ダイアログを開く
  const handleDeleteClick = (menuItem) => {
    setSelectedMenuItem(menuItem);
    setDeleteDialogOpen(true);
  };
  
  // メニュー項目を削除
  const handleDeleteMenuItem = () => {
    // 実際のアプリでは、APIを呼び出してメニュー項目を削除
    const updatedMenuItems = menuItems.filter(item => item.id !== selectedMenuItem.id);
    setMenuItems(updatedMenuItems);
    
    setAlert({
      open: true,
      message: 'メニュー項目が正常に削除されました',
      severity: 'success'
    });
    
    setDeleteDialogOpen(false);
    setSelectedMenuItem(null);
  };
  
  // 提供状況の切り替え
  const handleAvailabilityToggle = (menuItemId) => {
    const updatedMenuItems = menuItems.map(item => {
      if (item.id === menuItemId) {
        return {
          ...item,
          isAvailable: !item.isAvailable
        };
      }
      return item;
    });
    
    setMenuItems(updatedMenuItems);
  };
  
  // おすすめ状態の切り替え
  const handleFeaturedToggle = (menuItemId) => {
    const updatedMenuItems = menuItems.map(item => {
      if (item.id === menuItemId) {
        return {
          ...item,
          isFeatured: !item.isFeatured
        };
      }
      return item;
    });
    
    setMenuItems(updatedMenuItems);
  };
  
  // レシピリンクダイアログを開く
  const handleLinkRecipeClick = (menuItem) => {
    setSelectedMenuItem(menuItem);
    setSelectedRecipe(menuItem.recipeId ? menuItem.recipeId.toString() : '');
    setLinkRecipeDialogOpen(true);
  };
    
  // 価格履歴ダイアログを開く
  const handlePriceHistoryClick = (menuItem) => {
    setSelectedMenuItem(menuItem);
    setPriceHistoryDialogOpen(true);
  };
  
  // 売上分析ダイアログを開く
  const handleSalesAnalysisClick = (menuItem) => {
    setSelectedMenuItem(menuItem);
    setSalesAnalysisDialogOpen(true);
  };
    
  // 在庫自動引き落とし設定ダイアログを開く
  const handleInventoryDeductionClick = (menuItem) => {
    setSelectedMenuItem(menuItem);
    setInventoryDeductionDialogOpen(true);
  };
    
  // QRコード生成ダイアログを開く
  const handleQRCodeGeneratorClick = () => {
    setQrCodeGeneratorOpen(true);
  };
    
  // アラートを閉じる
  const handleCloseAlert = () => {
    setAlert({ ...alert, open: false });
  };
    
  // アラートを表示
  const showAlert = (message, severity = 'success') => {
    setAlert({ open: true, message, severity });
  };
    
  // カテゴリ名を取得
  const getCategoryName = (categoryId) => {
    const category = categories.find(cat => cat.id === categoryId);
    return category ? category.name : '未分類';
  };

// 提供状況の切り替え
const handleAvailabilityToggle = (menuItemId) => {
  const updatedMenuItems = menuItems.map(item => {
    if (item.id === menuItemId) {
      return {
        ...item,
        isAvailable: !item.isAvailable
      };
    }
    return item;
  });
  
  setMenuItems(updatedMenuItems);
};

// おすすめ状態の切り替え
const handleFeaturedToggle = (menuItemId) => {
  const updatedMenuItems = menuItems.map(item => {
    if (item.id === menuItemId) {
      return {
        ...item,
        isFeatured: !item.isFeatured
      };
    }
    return item;
  });
  
  setMenuItems(updatedMenuItems);
};

// レシピリンクダイアログを開く
const handleLinkRecipeClick = (menuItem) => {
  setSelectedMenuItem(menuItem);
  setSelectedRecipe(menuItem.recipeId ? menuItem.recipeId.toString() : '');
  setLinkRecipeDialogOpen(true);
};

// 価格履歴ダイアログを開く
const handlePriceHistoryClick = (menuItem) => {
  setSelectedMenuItem(menuItem);
  setPriceHistoryDialogOpen(true);
};

// 売上分析ダイアログを開く
const handleSalesAnalysisClick = (menuItem) => {
  setSelectedMenuItem(menuItem);
  setSalesAnalysisDialogOpen(true);
};

// 在庫自動引き落とし設定ダイアログを開く
const handleInventoryDeductionClick = (menuItem) => {
  setSelectedMenuItem(menuItem);
  setInventoryDeductionDialogOpen(true);
};

// QRコード生成ダイアログを開く
const handleQRCodeGeneratorClick = () => {
  setQrCodeGeneratorOpen(true);
};

// アラートを閉じる
const handleCloseAlert = () => {
  setAlert({ ...alert, open: false });
};

// アラートを表示
const showAlert = (message, severity = 'success') => {
  setAlert({ open: true, message, severity });
};

// カテゴリ名を取得
const getCategoryName = (categoryId) => {
  const category = categories.find(cat => cat.id === categoryId);
  return category ? category.name : '未分類';
};

export default MenuManagement;

    <Paper sx={{ mb: 3, p: 2 }}>
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
        <Box sx={{ display: 'flex', alignItems: 'center' }}>
          <TextField
            placeholder="メニュー項目を検索"
              InputProps={{
                startAdornment: (
                  <InputAdornment position="start">
                    <SearchIcon />
                  </InputAdornment>
                ),
              }}
              sx={{ mr: 2, width: 250 }}
            />
            <FormControl variant="outlined" size="small" sx={{ mr: 2, minWidth: 150 }}>
              <InputLabel>カテゴリ</InputLabel>
              <Select
                value={filterCategory}
                onChange={handleCategoryFilterChange}
                label="カテゴリ"
              >
                <MenuItem value="">すべて</MenuItem>
                {categories.map(category => (
                  <MenuItem key={category.id} value={category.id.toString()}>
                    {category.name}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
            <FormControl variant="outlined" size="small" sx={{ mr: 2, minWidth: 150 }}>
              <InputLabel>提供状況</InputLabel>
              <Select
                value={filterAvailability}
                onChange={handleAvailabilityFilterChange}
                label="提供状況"
              >
                <MenuItem value="">すべて</MenuItem>
                <MenuItem value="available">提供中</MenuItem>
                <MenuItem value="unavailable">提供停止中</MenuItem>
              </Select>
            </FormControl>
            <FormControl variant="outlined" size="small" sx={{ minWidth: 150 }}>
              <InputLabel>メニュータイプ</InputLabel>
              <Select
                value={filterMenuType}
                onChange={(e) => setFilterMenuType(e.target.value)}
                label="メニュータイプ"
              >
                <MenuItem value="">すべて</MenuItem>
                <MenuItem value="seasonal">季節限定</MenuItem>
                <MenuItem value="daily">日替わり</MenuItem>
                <MenuItem value="featured">おすすめ</MenuItem>
              </Select>
            </FormControl>
          </Box>
          <Button
            variant="outlined"
            startIcon={<FilterIcon />}
            onClick={resetFilters}
            size="small"
          >
            フィルタをリセット
          </Button>
        </Box>

        <TableContainer>
          <Table>
            <TableHead>
              <TableRow>
                <TableCell>メニュー項目</TableCell>
                <TableCell>カテゴリ</TableCell>
                <TableCell align="right">価格</TableCell>
                <TableCell>レシピ</TableCell>
                <TableCell>特別表示</TableCell>
                <TableCell align="center">提供状況</TableCell>
                <TableCell align="center">おすすめ</TableCell>
                <TableCell align="center">操作</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {filteredMenuItems.map((menuItem) => (
                <TableRow key={menuItem.id}>
                  <TableCell>
                    <Box sx={{ display: 'flex', alignItems: 'center' }}>
                      <Box sx={{ width: 60, height: 60, mr: 2, overflow: 'hidden', borderRadius: 1 }}>
                        <img src={menuItem.image} alt={menuItem.name} style={{ width: '100%', height: '100%', objectFit: 'cover' }} />
                      </Box>
                      <Box>
                        <Typography variant="subtitle1">{menuItem.name}</Typography>
                        <Typography variant="body2" color="text.secondary" sx={{ maxWidth: 250, overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }}>
                          {menuItem.description}
                        </Typography>
                        <Box sx={{ display: 'flex', alignItems: 'center', mt: 0.5 }}>
                          <IconButton 
                            size="small" 
                            color="primary" 
                            sx={{ p: 0.5 }}
                            onClick={(e) => {
                              e.stopPropagation();
                              handleSalesAnalysisClick(menuItem);
                            }}
                          >
                            <AnalyticsIcon fontSize="small" />
                          </IconButton>
                        </Box>
                      </Box>
                    </Box>
                  </TableCell>
                  <TableCell>{getCategoryName(menuItem.categoryId)}</TableCell>
                  <TableCell align="right">
                    <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'flex-end' }}>
                      <Typography>¥{menuItem.price.toLocaleString()}</Typography>
                      {menuItem.priceHistory && menuItem.priceHistory.length > 0 && (
                        <IconButton 
                          size="small" 
                          onClick={(e) => {
                            e.stopPropagation();
                            handlePriceHistoryClick(menuItem);
                          }}
                          sx={{ ml: 1 }}
                          color="primary"
                        >
                          <HistoryIcon fontSize="small" />
                        </IconButton>
                      )}
                    </Box>
                  </TableCell>
                  <TableCell>
                    {menuItem.recipeName ? (
                      <Box sx={{ display: 'flex', alignItems: 'center' }}>
                        <LinkIcon fontSize="small" sx={{ mr: 1, color: 'primary.main' }} />
                        <Typography variant="body2">{menuItem.recipeName}</Typography>
                      </Box>
                    ) : (
                      <Typography variant="body2" color="text.secondary">未設定</Typography>
                    )}
                  </TableCell>
                  <TableCell>
                    {menuItem.isSeasonalMenu && (
                      <Tooltip title={`提供期間: ${menuItem.seasonalPeriod.start} ~ ${menuItem.seasonalPeriod.end}`}>
                        <Box>
                          <Chip 
                            icon={<EventIcon />}
                            label="季節限定"
                            color={isSeasonalMenuInSeason(menuItem) ? "primary" : "default"}
                            variant={isSeasonalMenuInSeason(menuItem) ? "filled" : "outlined"}
                            size="small"
                          />
                        </Box>
                      </Tooltip>
                    )}
                    {menuItem.isDailySpecial && (
                      <Tooltip title={`提供曜日: ${menuItem.availableDays.map(day => {
                        const days = {
                          monday: '月',
                          tuesday: '火',
                          wednesday: '水',
                          thursday: '木',
                          friday: '金',
                          saturday: '土',
                          sunday: '日'
                        };
                        return days[day];
                      }).join(', ')}`}>
                        <Box sx={{ mt: menuItem.isSeasonalMenu ? 0.5 : 0 }}>
                          <Chip 
                            icon={<TodayIcon />}
                            label="日替わり"
                            color={isDailyMenuAvailableToday(menuItem) ? "secondary" : "default"}
                            variant={isDailyMenuAvailableToday(menuItem) ? "filled" : "outlined"}
                            size="small"
                          />
                        </Box>
                      </Tooltip>
                    )}
                  </TableCell>
              <TableCell align="center">
                <Switch
                  checked={menuItem.isAvailable}
                  onChange={() => handleAvailabilityToggle(menuItem.id)}
                  color="primary"
                />
              </TableCell>
              <TableCell align="center">
                <IconButton 
                  onClick={() => handleFeaturedToggle(menuItem.id)}
                  color={menuItem.isFeatured ? "warning" : "default"}
                >
                  {menuItem.isFeatured ? <StarIcon /> : <StarBorderIcon />}
                </IconButton>
              </TableCell>
              <TableCell align="center">
                <Box sx={{ display: 'flex', justifyContent: 'center' }}>
                  <Tooltip title="編集">
                    <IconButton 
                      size="small" 
                      onClick={() => handleEditMenuItem(menuItem.id)}
                    >
                      <EditIcon fontSize="small" />
                    </IconButton>
                  </Tooltip>
                  <Tooltip title="レシピをリンク">
                    <IconButton 
                      size="small" 
                      onClick={(e) => {
                        e.stopPropagation();
                        handleLinkRecipeClick(menuItem);
                      }}
                      color="primary"
                    >
                      <LinkIcon fontSize="small" />
                    </IconButton>
                  </Tooltip>
                  <Tooltip title="在庫自動引き落とし設定">
                    <IconButton 
                      size="small" 
                      onClick={(e) => {
                        e.stopPropagation();
                        handleInventoryDeductionClick(menuItem);
                      }}
                      color="success"
                    >
                      <InventoryIcon fontSize="small" />
                    </IconButton>
                  </Tooltip>
                  <Tooltip title="売上分析">
                    <IconButton 
                      size="small" 
                      onClick={(e) => {
                        e.stopPropagation();
                        handleSalesAnalysisClick(menuItem);
                      }}
                      color="primary"
                    >
                      <AnalyticsIcon fontSize="small" />
                    </IconButton>
                  </Tooltip>
                  <Tooltip title="削除">
                    <IconButton 
                      size="small" 
                      onClick={() => handleDeleteClick(menuItem)}
                    >
                      <DeleteIcon fontSize="small" />
                    </IconButton>
                  </Tooltip>
                </Box>
              </TableCell>
            </TableRow>
          ))}
          {filteredMenuItems.length === 0 && (
            <TableRow>
              <TableCell colSpan={7} align="center" sx={{ py: 3 }}>
                <Typography variant="body1" color="text.secondary">
                  メニュー項目が見つかりませんでした
                </Typography>
              </TableCell>
            </TableRow>
          )}
        </TableBody>
      </Table>
    </TableContainer>
  </Paper>

  {/* 在庫自動引き落とし設定ダイアログ */}
  <AutoInventoryDeductionDialog
    open={inventoryDeductionDialogOpen}
    onClose={() => setInventoryDeductionDialogOpen(false)}
    menuItem={selectedMenuItem}
  />
  
  {/* QRコード生成ダイアログ */}
  <QRCodeGenerator
    open={qrCodeGeneratorOpen}
    onClose={() => setQrCodeGeneratorOpen(false)}
    menuItems={menuItems}
    tables={tables}
  />

  {/* アラート */}
  <Snackbar 
    open={alert.open} 
    autoHideDuration={6000} 
    onClose={handleCloseAlert}
    anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
  >
    <Alert 
      onClose={handleCloseAlert} 
      severity={alert.severity} 
      sx={{ width: '100%' }}
    >
      {alert.message}
    </Alert>
  </Snackbar>
      <Paper sx={{ mb: 3, p: 2 }}>
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
          <Box sx={{ display: 'flex', alignItems: 'center' }}>
            <TextField
              placeholder="メニュー項目を検索"
              variant="outlined"
              size="small"
              value={searchTerm}
              onChange={handleSearchChange}
              InputProps={{
                startAdornment: (
                  <InputAdornment position="start">
                    <SearchIcon />
                  </InputAdornment>
                ),
              }}
              sx={{ mr: 2, width: 250 }}
            />
            <FormControl variant="outlined" size="small" sx={{ mr: 2, minWidth: 150 }}>
              <InputLabel>カテゴリ</InputLabel>
              <Select
                value={filterCategory}
                onChange={handleCategoryFilterChange}
                label="カテゴリ"
              >
                <MenuItem value="">すべて</MenuItem>
                {categories.map(category => (
                  <MenuItem key={category.id} value={category.id.toString()}>
                    {category.name}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
            <FormControl variant="outlined" size="small" sx={{ mr: 2, minWidth: 150 }}>
              <InputLabel>提供状況</InputLabel>
              <Select
                value={filterAvailability}
                onChange={handleAvailabilityFilterChange}
                label="提供状況"
              >
                <MenuItem value="">すべて</MenuItem>
                <MenuItem value="available">提供中</MenuItem>
                <MenuItem value="unavailable">提供停止中</MenuItem>
              </Select>
            </FormControl>
            <FormControl variant="outlined" size="small" sx={{ minWidth: 150 }}>
              <InputLabel>メニュータイプ</InputLabel>
              <Select
                value={filterMenuType}
                onChange={(e) => setFilterMenuType(e.target.value)}
                label="メニュータイプ"
              >
                <MenuItem value="">すべて</MenuItem>
                <MenuItem value="seasonal">季節限定</MenuItem>
                <MenuItem value="daily">日替わり</MenuItem>
                <MenuItem value="featured">おすすめ</MenuItem>
              </Select>
            </FormControl>
          </Box>
          <Button
            variant="outlined"
            startIcon={<FilterIcon />}
            onClick={resetFilters}
            size="small"
          >
            フィルタをリセット
          </Button>
        </Box>

        <TableContainer>
          <Table>
            <TableHead>
              <TableRow>
                <TableCell>メニュー項目</TableCell>
                <TableCell>カテゴリ</TableCell>
                <TableCell align="right">価格</TableCell>
                <TableCell>レシピ</TableCell>
                <TableCell>特別表示</TableCell>
                <TableCell align="center">提供状況</TableCell>
                <TableCell align="center">おすすめ</TableCell>
                <TableCell align="center">操作</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {filteredMenuItems.map((menuItem) => (
                <TableRow key={menuItem.id}>
                  <TableCell>
                    <Box sx={{ display: 'flex', alignItems: 'center' }}>
                      <Box sx={{ width: 60, height: 60, mr: 2, overflow: 'hidden', borderRadius: 1 }}>
                        <img src={menuItem.image} alt={menuItem.name} style={{ width: '100%', height: '100%', objectFit: 'cover' }} />
                      </Box>
                      <Box>
                        <Typography variant="subtitle1">{menuItem.name}</Typography>
                        <Typography variant="body2" color="text.secondary" sx={{ maxWidth: 250, overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }}>
                          {menuItem.description}
                        </Typography>
                        <Box sx={{ display: 'flex', alignItems: 'center', mt: 0.5 }}>
                          <IconButton 
                            size="small" 
                            color="primary" 
                            sx={{ p: 0.5 }}
                            onClick={(e) => {
                              e.stopPropagation();
                              handleSalesAnalysisClick(menuItem);
                            }}
                          >
                            <AnalyticsIcon fontSize="small" />
                          </IconButton>
                        </Box>
                      </Box>
                    </Box>
                  </TableCell>
                  <TableCell>{getCategoryName(menuItem.categoryId)}</TableCell>
                  <TableCell align="right">
                    <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'flex-end' }}>
                      <Typography>¥{menuItem.price.toLocaleString()}</Typography>
                      {menuItem.priceHistory && menuItem.priceHistory.length > 0 && (
                        <IconButton 
                          size="small" 
                          onClick={(e) => {
                            e.stopPropagation();
                            handlePriceHistoryClick(menuItem);
                          }}
                          sx={{ ml: 1 }}
                          color="primary"
                        >
                          <HistoryIcon fontSize="small" />
                        </IconButton>
                      )}
                    </Box>
                  </TableCell>
                  <TableCell>
                    {menuItem.recipeName ? (
                      <Box sx={{ display: 'flex', alignItems: 'center' }}>
                        <LinkIcon fontSize="small" sx={{ mr: 1, color: 'primary.main' }} />
                        <Typography variant="body2">{menuItem.recipeName}</Typography>
                      </Box>
                    ) : (
                      <Typography variant="body2" color="text.secondary">未設定</Typography>
                    )}
                  </TableCell>
                  <TableCell>
                    {menuItem.isSeasonalMenu && (
                      <Tooltip title={`提供期間: ${menuItem.seasonalPeriod.start} ~ ${menuItem.seasonalPeriod.end}`}>
                        <Box>
                          <Chip 
                            icon={<EventIcon />}
                            label="季節限定"
                            color={isSeasonalMenuInSeason(menuItem) ? "primary" : "default"}
                            variant={isSeasonalMenuInSeason(menuItem) ? "filled" : "outlined"}
                            size="small"
                          />
                        </Box>
                      </Tooltip>
                    )}
                    {menuItem.isDailySpecial && (
                      <Tooltip title={`提供曜日: ${menuItem.availableDays.map(day => {
                        const days = {
                          monday: '月',
                          tuesday: '火',
                          wednesday: '水',
                          thursday: '木',
                          friday: '金',
                          saturday: '土',
                          sunday: '日'
                        };
                        return days[day];
                      }).join(', ')}`}>
                        <Box sx={{ mt: menuItem.isSeasonalMenu ? 0.5 : 0 }}>
                          <Chip 
                            icon={<TodayIcon />}
                            label="日替わり"
                            color={isDailyMenuAvailableToday(menuItem) ? "secondary" : "default"}
                            variant={isDailyMenuAvailableToday(menuItem) ? "filled" : "outlined"}
                            size="small"
                          />
                        </Box>
                      </Tooltip>
                    )}
                  </TableCell>
                  <TableCell align="center">
                    <Switch
                      checked={menuItem.isAvailable}
                      onChange={() => handleAvailabilityToggle(menuItem.id)}
                      color="primary"
                    />
                  </TableCell>
                  <TableCell align="center">
                    <IconButton 
                      onClick={() => handleFeaturedToggle(menuItem.id)}
                      color={menuItem.isFeatured ? "warning" : "default"}
                    >
                      {menuItem.isFeatured ? <StarIcon /> : <StarBorderIcon />}
                    </IconButton>
                  </TableCell>
                  <TableCell align="center">
                    <Box sx={{ display: 'flex', justifyContent: 'center' }}>
                      <Tooltip title="編集">
                        <IconButton 
                          size="small" 
                          onClick={() => handleEditMenuItem(menuItem.id)}
                        >
                          <EditIcon fontSize="small" />
                        </IconButton>
                      </Tooltip>
                      <Tooltip title="レシピをリンク">
                        <IconButton 
                          size="small" 
                          onClick={(e) => {
                            e.stopPropagation();
                            handleLinkRecipeClick(menuItem);
                          }}
                          color="primary"
                        >
                          <LinkIcon fontSize="small" />
                        </IconButton>
                      </Tooltip>
                      <Tooltip title="在庫自動引き落とし設定">
                        <IconButton 
                          size="small" 
                          onClick={(e) => {
                            e.stopPropagation();
                            handleInventoryDeductionClick(menuItem);
                          }}
                          color="success"
                        >
                          <InventoryIcon fontSize="small" />
                        </IconButton>
                      </Tooltip>
                      <Tooltip title="売上分析">
                        <IconButton 
                          size="small" 
                          onClick={(e) => {
                            e.stopPropagation();
                            handleSalesAnalysisClick(menuItem);
                          }}
                          color="primary"
                        >
                          <AnalyticsIcon fontSize="small" />
                        </IconButton>
                      </Tooltip>
                      <Tooltip title="削除">
                        <IconButton 
                          size="small" 
                          onClick={() => handleDeleteClick(menuItem)}
                        >
                          <DeleteIcon fontSize="small" />
                        </IconButton>
                      </Tooltip>
                    </Box>
                  </TableCell>
                </TableRow>
              ))}
              {filteredMenuItems.length === 0 && (
                <TableRow>
                  <TableCell colSpan={8} align="center" sx={{ py: 3 }}>
                    <Typography variant="body1" color="text.secondary">
                      メニュー項目が見つかりませんでした
                    </Typography>
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </TableContainer>
      </Paper>

      {/* 在庫自動引き落とし設定ダイアログ */}
      <AutoInventoryDeductionDialog
        open={inventoryDeductionDialogOpen}
        onClose={() => setInventoryDeductionDialogOpen(false)}
        menuItem={selectedMenuItem}
      />
      
      {/* QRコード生成ダイアログ */}
      <QRCodeGenerator
        open={qrCodeGeneratorOpen}
        onClose={() => setQrCodeGeneratorOpen(false)}
        menuItems={menuItems}
        tables={tables}
      />

      {/* アラート */}
      <Snackbar 
        open={alert.open} 
        autoHideDuration={6000} 
        onClose={handleCloseAlert}
        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
      >
        <Alert 
          onClose={handleCloseAlert} 
          severity={alert.severity} 
          sx={{ width: '100%' }}
        >
          {alert.message}
        </Alert>
      </Snackbar>
    </Container>
  );
};

export default MenuManagement;
